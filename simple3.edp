//Example to solve the ice-shelf problem under the Euler-Bernoulli assumption.

verbosity = 0.;
bool debug=true;
include "macros.idp"
string SolutionDir="1_ThinPlate/";

nev=20;
setProblem;

solveDispersion;

isUniformIce=true;
setMeshIce(0, 0, 0); //Leave it default.

isUniformCav=true; //Force ice-shelf to be non-uniform. (Default is uniform)
setMeshCav(LL/2., -0.5*HH, -HH);

//Solve the eigenvalue problem for the Euler-Bernoulli case.
solveEigenEB;
cout<<mu<<endl;

//2) Get the nonlocal boundary condition.
matrix<complex> MQ;
complex[int] ctilde(NModes+1);
MQ=getQphi(ThCavity,NModes,k,kd,HH,dd,Ap,4);
ctilde=getChi(ThCavity,NModes,k,kd,HH,dd,Ap);
Wh<complex> chi1;
for(int m=0; m<NModes+1; m++)
  chi1 = chi1+ctilde[m]*cos(kd[m]*(y+HH))/cos(kd[m]*(HH-dd));

//3) Solve for the diffraction potential
Wh<complex> phi0;
func fh=chi1;
getLaplaceMatEB(0,0);
LHS=STIMA+(MQ);
set(LHS,solver=sparsesolver);
phih[]=LHS^-1*RHS[];
phi0=phih;
plot(phi0,wait=1,fill=1,value=1);

//4) Solve for the radiation potential
Wh<complex>[int] phij(nev);
for(int m=0; m<nev; m++)
  {
    fh=0;
    getLaplaceMatEB(m,1);
    LHS=STIMA+(MQ);
    set(LHS,solver=sparsesolver);
    phih[]=LHS^-1*RHS[];
    phij[m]=phih;    
  }

//Build reduced system
complex ndOmega=2*pi/tt;
complex alpha = HH*ndOmega^2;
real beta = 1;
real gamma = densRat*tth;
buildReducedSystemEB(mu, phi0, phij, alpha, beta, gamma);

//Solve the reduced system.
complex[int] xi(nev);
solveReducedSystem;

//Compute the solution
Wh<complex> phi;
phi=phi0;
for(int m=0; m<nev; m++)
  phi = phi + xi[m]*phij[m];

//Plot the data.
Wh rphi=real(phi);
plot(rphi,wait=1,value=1,fill=1);

//Compute the reflection coefficient.
complex[int] phiVec(phi.n), c(NModes+1);
phiVec=phi[];
complex Ref = getRefCoeff(ThCavity, NModes, kd, k, phiVec, HH, dd, Ap, c);
cout.precision(16);
cout<<"Reflection Coefficient = "<<Ref<<endl<<"|R| = "<<abs(Ref)<<endl;

