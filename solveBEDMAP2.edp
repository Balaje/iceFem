verbosity=0;

load "lapack"
include "macros.idp"

load "medit"
include "macro_ddm.idp"
include "ffddm_paramters.idp"
macro minimalMesh()square(2,2)//EOM
include "ffddm_partitioning.idp"

load "iovtk"

nev=64;
NModes=5;
real cpu=mpiWtime();
int isSolve= getARGV("-isMesh",0);
int nborders= getARGV("-nborders",4);

//Load the meshes.
iceBEDMAP2(nborders,isSolve);


if(mpirank==0){
  cout<<"Imported Ice Mesh (proc 0)..."<<endl;
  cout<<"Refining Ice Mesh (proc 0) ..."<<endl;
  cout<<"Ice : Before Refinement, NBV = "<<ThIce.nv<<endl;
  func metricFuncIce=0.02;
  ThIce=adaptmesh(ThIce,metricFuncIce,IsMetric=1,nbvx=2e6);
  cout<<"Ice : After Refinement, NBV = "<<ThIce.nv<<endl;
  plot(ThIce,wait=1);
 }
 else if(mpirank==1){
   cout<<"Imported Cavity Mesh (proc 1)..."<<endl;
   cout<<"Refining Cavity Mesh (proc 1) ..."<<endl;
   real LCav=abs(cavBegin-cavEnd)/Lc;
   func metricFuncCav=0.02;
   cout<<"Cavity : Before Refinement, NBV = "<<ThCavity.nv<<endl;
   ThCavity=adaptmesh(ThCavity,metricFuncCav,IsMetric=1,nbvx=2e6);
   cout<<"Cavity : After Refinement, NBV = "<<ThCavity.nv<<endl;
   plot(ThCavity,wait=1);
 }

broadcast(processor(0),ThIce);
broadcast(processor(1),ThCavity);

//Solve the dispersion equation.
if(nborders!=4)
  dd=0.;

solveDispersion;
if(mpirank==0)
  cout<<"Solved Dispersion Equation ... "<<endl;


matrix<complex> MQ;
complex[int] ctilde(NModes+1);
if(mpirank==0){
  MQ=getQphi(ThCavity,NModes,k,kd,HH,dd,Ap,4);
  cout<<"Obtained MQ (Proc "<<mpirank<<")"<<endl;
 }
if(mpirank==1){
  ctilde=getChi(ThCavity,NModes,k,kd,HH,dd,Ap);
  cout<<"Obtained ctilde (Proc "<<mpirank<<")"<<endl;
 }
broadcast(processor(0),MQ);
broadcast(processor(1),ctilde);

Wh<complex> chi1;
for(int m=0; m<NModes+1; m++)
  chi1=chi1+ctilde[m]*cos(kd[m]*(y+HH))/cos(kd[m]*(HH-dd));

//Solve EigenValue problem
Xh[int][VX,VY](nev);
real[int] ev(nev);
solveEigen;
if(mpirank==0){
  cout<<ev<<endl;
  cout<<"Solved EigenValue Problem ... "<<endl;
  ofstream file("BEDMAP2/2_Modes/eval.dat");
  for(int m=0; m<nev; m++)
    file<<ev[m]<<endl;
 }

//Solve for the Diffraction potential
Wh<complex> phi0;

if(mpirank==0){
  func fh=chi1;
  getLaplaceMatBEDMAP2(0,0);
  LHS=STIMA+(MQ)+(-BMASSMA);
  set(LHS,solver=sparsesolver);
  phih[]=LHS^-1*RHS[];
  phi0=phih;
  plot(phi0,wait=0,fill=1,value=1,dim=3);
  cout<<"Solved Diffraction Potential "<<endl<<endl;
 }
broadcast(processor(0),phi0[]);
if(mpirank==0)
  {
    complex[int] phiVec(phi0.n), c(NModes+1);
    phiVec = phi0[]; //Get the vector form of the finite element function.
    complex Ref = getRefCoeff(ThCavity, NModes, kd, k, phiVec, HH, dd, Ap, c); //From "refCoeff.idp"

    //Write the reflectiion coeffiecient to a file.
    ofstream file("BEDMAP2/2_RefCoeff/RefCoeff_Dif/refC"+iter+".dat");
    file.precision(16);
    file<<real(Ref)<<"\t"<<imag(Ref)<<endl;

  }
//Perform domain decomposition
ffddmbuildDmesh(M,ThIce,mpiCommWorld);
ffddmbuildDmesh(M1,ThCavity,mpiCommWorld);

int parti = nev/mpisize;
Wh<complex>[int] phij(nev);
F.resize(nev);
B.resize(nev,nev);
K.resize(nev,nev);
AB.resize(nev,nev);
complex[int] FProc(nev), RefmProc(nev), Refm(nev);
complex[int,int] BProc(nev,nev), KProc(nev,nev);
for(int m=mpirank*parti; m<mpirank*parti+parti; m++)
  {
    func fh=0;
    getLaplaceMatBEDMAP2(VX[m],VY[m]);
    LHS=STIMA+(MQ)+(-BMASSMA);
    set(LHS,solver=sparsesolver);
    phih[]=LHS^-1*RHS[];
    phij[m]=phih;

    real cpu=mpiWtime();
    if(mpirank!=0)
      processor(0)<<phih[];
    else if(mpirank==0)
      {
	for(int n=1; n<mpisize-1; n++)
	  processor(n)>>phij[m+n*parti][];	
      }
    if(mpirank==2)
      cout<<"Time in processor "<<mpirank<<" = "<<mpiWtime()-cpu<<"\t s"<<endl;    
  }

for(int m=0; m<nev; m++)
  broadcast(processor(0),phij[m][]);

real cpu1=mpiWtime();
for(int m=0; m<nev; m++)
  {
    FProc[m]=-(1i*omega*gammahat)*int1d(ThIce,1,qforder=10)(phi0*(VX[m]*N.x+VY[m]*N.y));
    for(int n=0; n<nev; n++)
      {
        BProc(m,n) = (rhoi*ev[m]-rhoi*omega^2)*int2d(ThIce)(VX[m]*VX[n]+VY[m]*VY[n]);
        KProc(n,m) = int1d(ThIce,1,qforder=10)((-VY[m]*deltahat + phij[m]*(1i*omega*gammahat))*(VX[n]*N.x+VY[n]*N.y));
      }
    //Write the radiation reflection coefficients to a file.
    complex [int] phiVecm(phih.n), cc(NModes+1), pk1(NModes+1);
    pk1=0.;
    phiVecm = phij[m][]; //Get the vector form of the finite element function.
    RefmProc[m] = getRefModes(ThCavity, NModes, kd, k, phiVecm, HH, dd, Ap, cc, pk1); //From "refCoeff.idp"
  }
cout<<"No of Vertices : "<<MaTh[mpirank].nv<<"\t Time in processor "<<mpirank<<" = "<<mpiWtime()-cpu1<<"\t s"<<endl;
mpiReduce(BProc, B, processor(0), mpiSUM);
mpiReduce(KProc, K, processor(0), mpiSUM);
mpiReduce(FProc, F, processor(0), mpiSUM);
mpiReduce(RefmProc, Refm, processor(0), mpiSUM);

if(mpirank==0) //Write the matrices to a file.
  {
    ofstream file1("BEDMAP2/2_ModesMatrix/ReH"+iter+".dat");
    ofstream file2("BEDMAP2/2_ModesMatrix/ImH"+iter+".dat");
    ofstream file3("BEDMAP2/2_ModesMatrix/ReF"+iter+".dat");
    ofstream file4("BEDMAP2/2_ModesMatrix/ImF"+iter+".dat");
    ofstream file5("BEDMAP2/2_RefCoeff/RefCoeff_Rad/refC"+iter+".dat");
    file1.precision(16);
    file2.precision(16);
    file3.precision(16);
    file4.precision(16);
    for(int m=0; m<nev; m++)
      {
        file3<<real(F[m])<<endl;
        file4<<imag(F[m])<<endl;
        file5<<real(Refm[m])<<"\t"<<imag(Refm[m])<<endl;
        for(int n=0; n<nev; n++)
          {
            file1<<real(B(m,n)+K(m,n))<<endl;
            file2<<imag(B(m,n)+K(m,n))<<endl;
          }
      }
  }

//Build the reduced system and solve it.
complex[int] xi(nev);
if(mpirank==0){
  cout<<"Built the system... Solving ... "<<endl;
  matrix<complex> Kmat, Bmat, ABmat;
  Kmat=K;
  Bmat=B;
  ABmat=AB;
  HHmat=Kmat+Bmat+ABmat;
  set(HHmat,solver=UMFPACK,eps=1e-20);
  xi=HHmat^-1*F;
  //Write solution vector to file.
  ofstream file1("BEDMAP2/2_ModesMatrix/lambdaj"+iter+".dat");
  file1.precision(16);
  for(int m=0; m<nev; m++)
    file1<<real(xi[m])<<"\t"<<imag(xi[m])<<endl;

 }
broadcast(processor(0),xi);

//Compute the solution.
Vh <complex> etax, etay, etaxProc, etayProc;
Wh<complex> phi, phiProc;
for(int m=mpirank*parti; m<mpirank*parti+parti; m++)
  {
    phiProc = phiProc + xi[m]*phij[m];
    etaxProc = etaxProc + xi[m]*VX[m];
    etayProc = etayProc + xi[m]*VY[m];
  }

mpiReduce(phiProc[],phi[],processor(0),mpiSUM);
mpiReduce(etaxProc[],etax[],processor(0),mpiSUM);
mpiReduce(etayProc[],etay[],processor(0),mpiSUM);

if(mpirank==0){
  //Compute the reflection coefficient.
  phi=phi0+phi;

  //Write the reflection coefficient to a file.
  complex[int] phiVec(phi.n), c(NModes+1);
  phiVec = phi[]; //Get the vector form of the finite element function.
  complex Ref = getRefCoeff(ThCavity, NModes, kd, k, phiVec, HH, dd, Ap, c); //From "refCoeff.idp"
  cout.precision(16);
  cout<<"Reflection Coefficient = "<<Ref<<endl<<"|R| = "<<abs(Ref)<<endl;
  ofstream file("BEDMAP2/2_RefCoeff/RefCoeff"+iter+".dat");

  mesh ThNewIce=movemesh(ThIce,[x+real(etax),y+real(etay)]);
  plot(ThNewIce,wait=1);
  Wh rphi=real(phi);
  Wh iphi=imag(phi);
  plot(rphi,wait=1,fill=1,value=1);

  //Write data to MATLAB
  //iter could be used to index the solution.
  Vh ux=real(etax), uy=real(etay);
  Vh iux=imag(etax), iuy=imag(etay);

  savevtk("1_BEDMAP2/ThIce.vtk",ThIce);
  savevtk("1_BEDMAP2/ThCavity.vtk",ThCavity);
  savevtk("1_BEDMAP2/ThNewIce.vtk",ThNewIce);
  int[int] Order=[1];
  savevtk("1_SIMPLE5/rphi.vtk",ThCavity,rphi,dataname="rphi",order=Order);  
 }

cout<<"\nProcessor: "<<mpirank<<" Total time = "<<mpiWtime()-cpu<<"\t s"<<endl;
