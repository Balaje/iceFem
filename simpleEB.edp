verbosity=0.;
macro dimension 2//EOM
macro fspace 1//EOM
include "macros.idp"

SolutionDir="1_THIN/";

//Set Problem Parameters and solve the dispersion equation
setProblem;
solveDispersion;

nev=20;

//Set Meshes
setMeshIce(0,0,0);
isUniformCav=true;
setMeshCav(LL/2., -0.5*HH, -HH);

refineMesh;

//Solve Euler Bernoulli Eigenvalue problem
solveEigenEB;

//Non-local boundary condition
Wh<complex> chi1;
matrix<complex> MQ;
getQphi(4,MQ);
getChi(chi1);

//Diffraction potential
Wh<complex> phi0;
func fh=chi1;
getLaplaceMatEB(0,0);
LHS=STIMA+(MQ);
set(LHS,solver=sparsesolver);
phih[]=LHS^-1*RHS[];
phi0=phih;

//Radiation potentials
Wh<complex>[int] phij(nev);
for(int m=0; m<nev; m++)
 {
     fh=0;
     getLaplaceMatEB(m,1);    
     LHS=STIMA+(MQ);
     set(LHS,solver=sparsesolver);
     phih[]=LHS^-1*RHS[];
     phij[m]=phih;
 }

//Parameters for building the reduced system
complex ndOmega=2*pi/tt;
real beta=1;
real gamma=densRat*tth;

//Construct and solve Reduced system
buildReducedSystemEB(mu, phi0, phij, alpha, beta, gamma);
solveReducedSystem;

if(mpirank==0)
    cout<<xi<<endl;

//Obtain the potential
Wh<complex> phi=phi0;
for(int m=0; m<nev; m++)
    phi=phi+xi[m]*phij[m];

//Reflection Coefficients
complex Ref;
getRefCoeff(4,phi,Ref);

if(mpirank==0)
    cout<<"Reflection Coefficient = "<<Ref<<"\t Absolute Value = "<<abs(Ref)<<endl;
