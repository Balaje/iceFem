//Simple example to demonstrate the ice-shelf toolbox;
//Invoking Domain decomposition technique.

verbosity=0.;
real cpu=mpiWtime();
bool debug=true;

//Domain decomposition module.
macro dimension 2//EOM"
macro fspace 2//EOM"

include "macros.idp"

real timeTaken;

SolutionDir="1_SIMPLE5/";

macro Sigma(u,v)[2*muhat*dx(u)+lambdahat*(dx(u)+dy(v)),
                 2*muhat*dy(v)+lambdahat*(dx(u)+dy(v)),
                 muhat*(dy(u)+dx(v))]//EOM (Macro to define the stress tensor)"

//Sets up an example problem. Can control input using CMD line args.
//For a detailed list of default args. Refer the manual.
setProblem;

//Solve the dispersion equation -k tan(k h) = \alpha. -k tan(k (h-d)) = \alpha
solveDispersion;

real starttime=mpiWtime();
//Build the meshes.
real botRight=-3.*tth, midPX=3.7*LL/4, midPY=-2.5*tth;
setMeshIce(botRight, midPX, midPY);
real midx=LL/2., midy=-0.5*HH, endy=-HH;
setMeshCav(midx, midy, endy);
refineMesh;//Refine Mesh.
splitMesh(isSplit);//Split Mesh for domain decomposition
real endtime=mpiWtime();
real difTime=endtime-starttime;
mpiReduce(difTime,timeTaken,processor(0),mpiMAX);
if(mpirank==0)
  cout<<"Time taken for Meshing = "<<timeTaken<<" s"<<endl;

Xh[int][VX,VY](nev); //Define an array of fe-function to store in-vacuo modes.
real[int] ev(nev); //Define a real array for the eigenvalues.
starttime=mpiWtime();
readEigen;
endtime=mpiWtime();
difTime=endtime-starttime;
mpiReduce(difTime,timeTaken,processor(0),mpiMAX);
if(mpirank==0)
  cout<<"Time to solve Eigenvalue = "<<timeTaken<<" s"<<endl;
//readEigen;


//  2) Get the Non-local boundary condition
Wh<complex> chi1;
matrix<complex> MQ;
getQphi(4,MQ);
getChi;
for(int m=0; m<NModes+1; m++)
  chi1 = chi1+ctilde[m]*cos(kd[m]*(y+HH))/cos(kd[m]*(HH-dd));

//  3) Solve for the diffraction potential.
Wh<complex> phi0;
func fh=chi1;//Store in fh, the right-hand side function on the ocean-cavity interface.
getLaplaceMat(0,0,0);
LHS=STIMA+(MQ);
set(LHS,solver=UMFPACK,eps=1e-20);
phih[]=LHS^-1*RHS[];
phi0=phih;//Store in phi0;
//Interpolate to boundary.
WhBdy<complex> phi00=phi0;


//Solve for radiation potential.
Wh<complex>[int] phij(nev);
WhBdy<complex>[int] phijj(nev);//Define array of boundary functions.
buildParti;
complex[int,int] PHIJ(WhBdy.ndof,nev),PHIJProc(WhBdy.ndof,partisize);
starttime=mpiWtime();
for(int m=start; m<=stop; m++)
  {
    func fh=0;
    getLaplaceMat(VX[m],VY[m],0);
    LHS=STIMA+(MQ);
    set(LHS,solver=UMFPACK,eps=1e-20);
    phih[]=LHS^-1*RHS[];
    phij[m]=phih; //Leave the bulk as it is. This will not be used in constructing the matrices.
    phijj[m]=phih; //Interpolate on the BOUNDARY alone and store in matrix. This will be used in the construction of the matrices
    PHIJProc(:,m-start)=phijj[m][];
  }
int[int] rcounts1=rcounts*WhBdy.ndof, dspls1=dspls*WhBdy.ndof;
mpiAllgatherv(PHIJProc,PHIJ,rcounts1,dspls1);
endtime=mpiWtime();
difTime=endtime-starttime;
mpiReduce(difTime,timeTaken,processor(0),mpiSUM);
if(mpirank==0)
  cout<<"Time taken to solve potentials = "<<timeTaken/mpisize<<" s"<<endl;

//Unpack and set to phij locally in all procs (Only boundary)
for(int m=0; m<nev; m++)
  phijj[m][]=PHIJ(:,m);

K.resize(nev,nev);
B.resize(nev,nev);
AB.resize(nev,nev);
F.resize(nev);
starttime=mpiWtime();
buildReducedSystemOptim;
endtime=mpiWtime();
difTime=endtime-starttime;
mpiReduce(difTime,timeTaken,processor(0),mpiMAX);
if(mpirank==0){
  cout<<"Time taken to build reduced system = "<<timeTaken<<" s"<<endl;
  writeReducedSystem;
 }

//Solve the reduced system;
solveReducedSystem;

//Compute the solution.
Vh<complex> etax, etay, etaxProc, etayProc;
Wh<complex> phi, phiProc;
for(int m=start; m<=stop; m++)
  {
    phiProc = phiProc + xi[m]*phij[m];
    etaxProc = etaxProc + xi[m]*VX[m];
    etayProc = etayProc + xi[m]*VY[m];
  }

mpiReduce(phiProc[],phi[],processor(0),mpiSUM);
mpiReduce(etaxProc[],etax[],processor(0),mpiSUM);
mpiReduce(etayProc[],etay[],processor(0),mpiSUM);

if(mpirank==0){
  //Compute the reflection coefficient.
  cout<<"\n\n\n";
  cout<<"Non-Dim parameter Lc,Tc = "<<Lc<<","<<tc<<endl;
  phi=phi+phi0;  
  complex Ref;
  getRefCoeff(4,phi,Ref);
  cout.precision(16);
  cout<<"Reflection Coefficient = "<<Ref<<endl<<"|R| = "<<abs(Ref)<<endl;

  //Write data to MATLAB
  //iter could be used to index the solution.

  int[int] Order=[1,1];
  savevtk(SolutionDir+"/sol1_"+iter+".vtk",ThIce,[real(etax),real(etay)],[imag(etax),imag(etay)], dataname="ReDisp ImDisp",order=Order);
  savevtk(SolutionDir+"/sol2_"+iter+".vtk",ThIce,[real(Sigma(etax,etay)[0]), real(Sigma(etax,etay)[1]), real(Sigma(etax,etay)[2])],[imag(Sigma(etax,etay)[0]), imag(Sigma(etax,etay)[1]), imag(Sigma(etax,etay)[2])],dataname="ReSigma ImSigma",order=Order);
  savevtk(SolutionDir+"/solCavity"+iter+".vtk",ThCavity,[real(phi),imag(phi)],dataname="RePhi ImPhi",order=Order);
 }

starttime=cpu;
endtime=mpiWtime();
difTime=endtime-starttime;
mpiReduce(difTime,timeTaken,processor(0),mpiMAX);
if(mpirank==0)
  cout<<"Total time = "<<timeTaken<<" s"<<endl;
