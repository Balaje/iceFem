//IDP file to perform interpolation on the frequency space.
load "gsl"
//Get the parameters from the user.
real omega0=getARGV("-omega0",2*pi*0.01);
real omega1=getARGV("-omega1",2*pi*0.1);
real dOmega=(omega1-omega0)/(nFreqCoarse-1);
complex[int] omegaCoarse=omega0:dOmega:omega1;
int startindx=getARGV("-startindx",1), endindx=getARGV("-endindx",10);
if(nFreqCoarse != (endindx-startindx+1)) exit(1);
complex[int,int] HCoarse(nev^2, nFreqCoarse), FCoarse(nev, nFreqCoarse);

//Macro Read all the files and store in arrays. Updates HCoarse, FCoarse
macro readCoarseFreq(){
    HCoarse.resize(nev^2,nFreqCoarse);
    FCoarse.resize(nev,nFreqCoarse);
    for(int m=0; m<nFreqCoarse; m++)
    {
        ifstream HRe(SolutionDir+"2_ModesMatrix/ReH"+(m+startindx)+".dat");
        ifstream HIm(SolutionDir+"2_ModesMatrix/ImH"+(m+startindx)+".dat");
        ifstream FRe(SolutionDir+"2_ModesMatrix/ReF"+(m+startindx)+".dat");
        ifstream FIm(SolutionDir+"2_ModesMatrix/ImF"+(m+startindx)+".dat");
        for(int n=0; n<nev^2; n++)
        {
            HRe>>HCoarse(n,m);
            real tmp; HIm>>tmp;
            HCoarse(n,m)+=1i*tmp;
            if(n<nev)
            {
                FRe>>FCoarse(n,m);
                real tmp; FIm>>tmp;
                FCoarse(n,m)+=1i*tmp;
            }
        }
    }
}//EOM"

if(nFreqFine==1) exit(1);
real dOmegaFine=(omega1-omega0)/(nFreqFine-1);
complex[int] omegaFine=omega0:dOmegaFine:omega1;
complex[int,int] HFine(nev^2,nFreqFine), FFine(nev,nFreqFine);
macro interpolateFreqReal(){
    ofstream HRe(SolutionDir+"2_ModesMatrix/Interpolated_H/ReH.dat");
    ofstream HIm(SolutionDir+"2_ModesMatrix/Interpolated_H/ImH.dat");
    ofstream FRe(SolutionDir+"2_ModesMatrix/Interpolated_F/ReF.dat");
    ofstream FIm(SolutionDir+"2_ModesMatrix/Interpolated_F/ImF.dat");
    ofstream lamRe(SolutionDir+"2_ModesMatrix/Interpolated_L/lambdajRe.dat");
    ofstream lamIm(SolutionDir+"2_ModesMatrix/Interpolated_L/lambdajIm.dat");

    for(int m=0; m<nev^2; m++)
    {
        if(m<nev)
        {
            complex[int] F1=FCoarse(m,:);
            real[int,int] DRe(2, F1.n), DIm(2, F1.n);
            DRe(0,:)=omegaCoarse.re; DRe(1,:)=F1.re;
            DIm(0,:)=omegaCoarse.re; DIm(1,:)=F1.im;
            gslspline FSplineRe(gslinterpcspline, DRe);
            gslspline FSplineIm(gslinterpcspline, DIm);
            for(int n=0; n<nFreqFine; n++){
                FFine(m,n)=FSplineRe(real(omegaFine[n]));
                real tmp=FSplineIm(real(omegaFine[n]));
                FFine(m,n)+=1i*tmp;
            }
        }
        complex[int] H1=HCoarse(m,:);
        real[int,int] DRe(2, H1.n), DIm(2, H1.n);
        DRe(0,:)=omegaCoarse.re; DRe(1,:)=H1.re;
        DIm(0,:)=omegaCoarse.re; DIm(1,:)=H1.im;
        gslspline HSplineRe(gslinterpcspline, DRe);
        gslspline HSplineIm(gslinterpcspline, DIm);
        for(int n=0; n<nFreqFine; n++){
            HFine(m,n)=HSplineRe(real(omegaFine[n]));
            real tmp=HSplineIm(real(omegaFine[n]));
            HFine(m,n)+=1i*tmp;
        }
    }
    for(int m=0; m<nFreqFine; m++)
    {
        complex[int,int] Hmat(nev,nev);
        complex[int] Fmat(nev), lambda(nev);
        for(int n=0; n<nev^2; n++)
        {
            HRe<<real(HFine(n,m))<<"\t";
            HIm<<imag(HFine(n,m))<<"\t";
            if(n<nev)
            {
                FRe<<real(FFine(n,m))<<"\t";
                FIm<<imag(FFine(n,m))<<"\t";
                Fmat[n]=FFine(n,m);
            }
            Hmat(n/nev, n%nev)=HFine(n,m);
        }
        matrix<complex>HHmat=Hmat;
        set(HHmat,solver=sparsesolver);
        lambda=HHmat^-1*Fmat;
        for(int n=0; n<nev; n++)
        {
            lamRe<<real(lambda[n])<<"\t";
            lamIm<<imag(lambda[n])<<"\t";
        }
        HRe<<"\n"; HIm<<"\n"; FRe<<"\n"; FIm<<"\n";
        lamRe<<"\n"; lamIm<<"\n";
    }
}//EOM"

/*
  This macro reads the latest mesh from the working directory and the corresponding invacuo modes.
  Then the interpolated solution is read from the working directory and reconstructs the solution.
  The mesh and eigenspace needs to be defined properly.
  If the user needs to solve and save the eigenvalue problem, set iseigen=true
*/
macro constructFineSpace(nfreq, iseigen)
{
    if(iseigen){
        solveEigen;
        writeEigen(false,true);
    }
    UXT.resize(Vh.ndof,nfreq);
    UYT.resize(Vh.ndof,nfreq);
    complex[int,int] mx(nev,Vh.ndof), my(nev,Vh.ndof);
    real[int] tmp(Vh.ndof);
    for(int m=0; m<nev; m++)
    {
        ifstream filex(SolutionDir+"2_Modes/MODESX"+m+".dat");
        filex>>tmp;
        mx(m,:).re=tmp;
        ifstream filey(SolutionDir+"2_Modes/MODESY"+m+".dat");
        filey>>tmp;
        my(m,:).re=tmp;        
    }
    complex[int,int] lambdaRe(nfreq,nev), lambdaIm(nfreq,nev);
    readFile(nfreq,nev,SolutionDir+"2_ModesMatrix/Interpolated_L/lambdajRe.dat",lambdaRe);
    readFile(nfreq,nev,SolutionDir+"2_ModesMatrix/Interpolated_L/lambdajIm.dat",lambdaIm);
    complex[int,int] lambda=lambdaIm;
    lambda*=1i;
    lambda+=lambdaRe;
    complex[int,int] UX(nfreq,Vh.ndof), UY(nfreq,Vh.ndof);
    UX=lambda*mx;
    UY=lambda*my;
    UXT=UX';
    UYT=UY';
    UXT=conj(UXT);
    UYT=conj(UYT);
}//Macro to extract the solution in the fine-frequency space. EOM"

//Construct the time-domain solution and write it in the main directory.
macro constructTimeDomainSol(ampFile,time)
{
    complex[int,int] FAmp(3,nFreqFine);
    readFile(3,nFreqFine,ampFile,FAmp);    
    complex[int] domega(nFreqFine), omegaNew=omegaFine;
    domega=omegaNew(1:omegaNew.n);
    domega-=omegaNew(0:omegaNew.n-1);
    domega(omegaNew.n-1)=0;
    complex[int] randn(nFreqFine);
    randn=FAmp(2,:);
    complex[int] omegaVec(nFreqFine), u3x(Vh.ndof), u3y(Vh.ndof);
    IFMACRO(dimension,3)
        complex[int] u3z(Vh.ndof);
    ENDIFMACRO
    buildPartiCPU(time.n);
    for(int n=start; n<=stop; n++)
    {
        omegaVec=(-1i)*omegaNew;
        omegaVec*=time(n);
        omegaVec+=(-1i)*randn;
        omegaVec=exp(omegaVec);
        omegaVec=omegaVec.*FAmp(1,:);
        omegaVec=omegaVec.*domega;
        omegaVec*=(2*omegaNew.n/pi);
        u3x=UXT*omegaVec;
        u3y=UYT*omegaVec;        
        IFMACRO(dimension,2)
            Vh<complex> etax=u3x, etay=u3y;
            int[int] Order1=[1,1,1],Order=[1,1];
            savevtk(SolutionDir+"/time_"+n+".vtk",ThIce,[real(etax),real(etay)],[imag(etax),imag(etay)], dataname="ReDisp ImDisp",order=Order);
            computeStressField;                          
            savevtk(SolutionDir+"/time-stress_"+n+".vtk",ThIce,
                    [real(Sigma(etax,etay)[0]), real(Sigma(etax,etay)[1]), real(Sigma(etax,etay)[2])],
                    [imag(Sigma(etax,etay)[0]), imag(Sigma(etax,etay)[1]), imag(Sigma(etax,etay)[2])],
                    dataname="ReSigma ImSigma",order=Order);
        ENDIFMACRO
        IFMACRO(dimension,3)
            u3z=UZT*omegaVec;
            Vh<complex> etax=u3x, etay=u3y, etaz=u3z;
            int[int] Order1=[1,1,1,1,1,1],Order=[1,1,1];
            savevtk(SolutionDir+"/time_"+n+".vtu",ThIce,[real(etax),real(etay),real(etaz)],[imag(etax),imag(etay),imag(etaz)], dataname="ReDisp ImDisp",order=Order);
            computeStressField;            
            savevtk(SolutionDir+"/time-stress_"+n+".vtu",ThIce,
                    [real(Sigma(etax,etay,etaz)[0]), real(Sigma(etax,etay,etaz)[1]), real(Sigma(etax,etay,etaz)[2]), real(Sigma(etax,etay,etaz)[3]), real(Sigma(etax,etay,etaz)[4]), real(Sigma(etax,etay,etaz)[5])],                   
                    [imag(Sigma(etax,etay,etaz)[0]), imag(Sigma(etax,etay,etaz)[1]), imag(Sigma(etax,etay,etaz)[2]), imag(Sigma(etax,etay,etaz)[3]), imag(Sigma(etax,etay,etaz)[4]), imag(Sigma(etax,etay,etaz)[5])],
                    dataname="ReSigma ImSigma",order=Order1);

        ENDIFMACRO
        if(mpirank==0)
            cout<<"Time t="<<n<<endl;
    }
}//EOM"

//Macro to compute the stress field TODO
macro computeStressField()
{
    ifstream fin(SolutionDir+"2_Modes/iceCav.dat");
    real L, H, th, E, nu, mu1, lambda;   
    fin>>L>>H>>th>>E>>nu>>Lc>>tc>>mu1>>lambda>>rhoi>>rhow>>ag;
    lambdahat=lambda/Lc^2;
    muhat=mu1/Lc^2;               
}//EOM"
