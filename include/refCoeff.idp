//Module to get the reflection coefficients
func complex getRefCoeff(mesh &ThCavity, int NModes, complex [int] kd, complex[int] k, complex[int] phiMat, real HH, real dd, complex Ap, complex [int] &c)
{  
  fespace Wh(ThCavity,P1);
  Wh <complex> phi = phiMat;
  
  complex[int] aa(NModes+1), bb(NModes+1);
  for(int m=0; m<NModes+1; m++)
    {
      func eigenfunc = cos(kd[m]*(y+HH))/cos(kd[m]*(HH-dd));
      aa(m) = int1d(ThCavity,4,qforder=10)(phi*eigenfunc);
    }

  complex [int] f(NModes+1), g(NModes+1);
  complex [int,int] A(NModes+1,NModes+1), MM(NModes+1,NModes+1), MMt(NModes+1,NModes+1);
  int nbv = ThCavity.nv;  
  //Get all the matrices
  int flag = getMat(ThCavity, k, kd, HH, dd , Ap, NModes, A, f, g, MM, MMt);

  //Obtain the right hand side function \chi(y);
  complex [int,int] MMinv = MM^-1;
  complex [int,int] MMtinv = MMt^-1;
  complex [int,int] TT = (MMtinv*A);
  complex [int,int] T = TT*MMinv;
  complex [int] Mg = MMtinv*g;
  complex [int] Tf = T*f,ctilde(NModes+1);

  bb = T*aa; bb = bb+Mg; bb = bb-Tf;
  c = MMt*bb; c = c - g;
  complex[int,int] AA=A^-1;
  c = AA*c;
  complex Ref = c[0]/Ap;

  return Ref;
}


func complex getRefModes(mesh &ThCavity, int NModes, complex [int] kd, complex [int] k, complex [int] phiMat, real HH, real dd, complex Ap, complex [int] &c, complex[int] &pk)
{
  fespace Wh(ThCavity,P1);
  Wh <complex> phi = phiMat;
  
  complex [int] aa(NModes+1), bb(NModes+1);
  for(int m=0; m<NModes+1; m++)
    {
      func eigenfunc = cos(kd[m]*(y+HH))/cos(kd[m]*(HH-dd));
      aa[m] = int1d(ThCavity,4,qforder=10)(phi*eigenfunc);
    }

  complex [int] c1(NModes+1);
  complex [int] f(NModes+1), g(NModes+1);
  complex [int,int] A(NModes+1,NModes+1), MM(NModes+1,NModes+1), MMt(NModes+1,NModes+1);
  int nbv = ThCavity.nv;
  
  int flag = getMat(ThCavity, k, kd, HH, dd, Ap, NModes, A, f, g, MM, MMt);

  //Obtain the matrices for the
  complex [int,int] MMinv = MM^-1;
  complex [int,int] MMtinv = MMt^-1;
  complex [int,int] TT = (MMtinv*A);
  complex [int,int] T = TT*MMinv;

  bb = T*aa;
  c1 = MMt*bb;
  complex[int,int] AA=A^-1;
  c1 = c1 - pk;
  c = AA*c1;
  complex Ref = c[0]/Ap;

  return Ref;
}
