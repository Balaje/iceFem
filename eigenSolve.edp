verbosity=0.;
macro dimension 2//EOM"
macro fspace 2//EOM"
include "macros.idp"
int choice=getARGV("-isBEDMAP",0);
if(choice)
  {//Set up a BEDMAP problem.
    SolutionDir="1_BEDMAP2/";
    int nborders=getARGV("-nborders",6);
    int isMesh=getARGV("-isMesh",1);
    iceBEDMAP2(nborders,isMesh);//Build the meshes.
    if(isMesh)
      refineMesh;
  }
 else
   {//Set up an example problem
     SolutionDir="1_SIMPLE5/";
     setProblem;
     real botRight=-3.*tth, midPX=3.7*LL/4, midPY=-2.5*tth;
     setMeshIce(botRight, midPX, midPY);
     real midx=LL/2., midy=-0.5*HH, endy=-HH;
     setMeshCav(midx, midy, endy);
     refineMesh;
   }

Xh[int][VX,VY](nev);
real[int] ev(nev);
real startTime=mpiWtime();
if(mpirank==0)
  cout<<"Solving Eigenvalue problem ..."<<endl;
solveEigen;
if(mpirank==0){  
  cout<<"Solved Eigenvalue problem in "<<mpiWtime()-startTime<<" s."<<endl;
  writeEigen(1,1);
 }
