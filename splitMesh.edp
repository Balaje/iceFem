verbosity=0.;
load "iovtk"
macro dimension 2//EOM"

include "macros.idp"
load "medit"
include "macro_ddm.idp"
macro minimalMesh()square(2,2)//EOM
include "ffddm_parameters.idp"
include "ffddm_partitioning.idp"


//Assuming that the meshes already exist in the folder.
if(getARGV("-isBEDMAP2",false)){
  iceBEDMAP2(nborders,0);
 }
 else{
   //Build the meshes.
   setProblem;
   real botRight=-3.*tth, midPX=3.7*LL/4, midPY=-2.5*tth;
   setMeshIce(botRight, midPX, midPY);
   real midx=LL/2., midy=-0.5*HH, endy=-HH;
   setMeshCav(midx, midy, endy);
 }

if(mpirank==0){
  cout<<"Imported Ice Mesh (proc 0)..."<<endl;
  cout<<"Refining Ice Mesh (proc 0) ..."<<endl;
  cout<<"Ice : Before Refinement, NBV = "<<ThIce.nv<<endl;
  func metricFuncIce=getARGV("-hsize",0.02);
  ThIce=adaptmesh(ThIce,metricFuncIce,IsMetric=1,nbvx=2e6);
  cout<<"Ice : After Refinement, NBV = "<<ThIce.nv<<endl;
  plot(ThIce,wait=1);
 }
 else if(mpirank==1){
   cout<<"Imported Cavity Mesh (proc 1)..."<<endl;
   cout<<"Refining Cavity Mesh (proc 1) ..."<<endl;
   real LCav=abs(cavBegin-cavEnd)/Lc;
   func metricFuncCav=getARGV("-hsize",0.02);
   cout<<"Cavity : Before Refinement, NBV = "<<ThCavity.nv<<endl;
   ThCavity=adaptmesh(ThCavity,metricFuncCav,IsMetric=1,nbvx=2e6);
   cout<<"Cavity : After Refinement, NBV = "<<ThCavity.nv<<endl;
   plot(ThCavity,wait=1);
 }
broadcast(processor(0),ThIce);
broadcast(processor(1),ThCavity);
savemesh(ThIce,"./MESHES_SPLIT/FullIce.msh");
savemesh(ThCavity,"./MESHES_SPLIT/FullCavity.msh");


//Perform domain decomposition and write to file.
ffddmbuildDmesh(M,ThIce,mpiCommWorld);
ffddmbuildDmesh(M1,ThCavity,mpiCommWorld);
savemesh(MaTh[mpirank],"./MESHES_SPLIT/IceMaTh"+mpirank+".msh");
savemesh(M1aTh[mpirank],"./MESHES_SPLIT/CavityM1aTh"+mpirank+".msh");
//Construct the interpolation matrices
cout<<"Number of verts = "<<mpirank<<"\t"<<MaTh[mpirank].nv<<endl;
real cpu2=mpiWtime();
fespace MMh(MaTh[mpirank],P1);
matrix M1xM=interpolate(MMh,Wh);
cout<<"Time to interpolate = "<<mpiWtime()-cpu2<<endl;
{
  ofstream file1("./MESHES_SPLIT/M1xM"+mpirank+".dat");
  file1<<M1xM;
}
