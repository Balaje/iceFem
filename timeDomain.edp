//Program to derive the time-domain solution.
verbosity=0;
macro dimension 2//EOM"
macro fspace 2//EOM"

include "macros.idp"

macro Sigma(u,v)[2*muhat*dx(u)+lambdahat*(dx(u)+dy(v)),
                 2*muhat*dy(v)+lambdahat*(dx(u)+dy(v)),
                 muhat*(dy(u)+dx(v))]//EOM"

    SolutionDir=getARGV("-SolDir","1_ICEBERG/");

//Set the problem and build the meshes
setProblem;

//Construct linear meshes.
real draft1=-0.9*tth, free1=0.1*tth;
real draft2=-0.9*tth, free2=0.1*tth;
real HH1=-HH, HH2=-HH;
setLinearThickeningIce(draft1,draft2,free1,free2);
setLinearThickeningCavity(HH1,HH2,draft1,draft2);

refineMesh;//Refine Mesh.

//Change the label for iceberg meshes.
int[int] lbl=[3,3,2,1,1,1,1,1]; 
ThIce=change(ThIce,label=lbl);
lbl=[1,1,6,5,3,3,4,4];
ThCavity=change(ThCavity,label=lbl);

//Construct the fine frequency space and get the solution in UXT, UYT
Vh<complex> dispX, dispY; 
constructFineSpace(nfreq,59,dispX[],dispY[],-1); //-1 for the default directory.

//Time domain data from FAmp.dat
complex[int,int] FAmp(3,nfreq);
readFile(3, nfreq,  "FAmp.dat", FAmp);
//Write time domain solution
real dt=0.4, T=80;
real[int] time=-T:dt:T;

complex[int] domega(nfreq), omegaNew(nfreq);
omegaNew=FAmp(0,:);
domega=omegaNew(1:omegaNew.n);
domega-=omegaNew(0:omegaNew.n-1);
domega(omegaNew.n-1)=0;

//Phase
complex[int] randn(nfreq);
randn=FAmp(2,:);
//Find the complex solution.
complex[int] omegaVec(nfreq), u3x(Vh.ndof), u3y(Vh.ndof);

mesh Th1=emptymesh(ThIce);
fespace Vh1(Th1,P1);
buildParti(time.n);
real[int] RMSStrain(time.n), RMSStrainProc(partisize);
cout<<"Partisize = "<<partisize<<"\t Start = "<<start<<"\t"<<"Stop = "<<stop<<endl;
for(int n=start; n<=stop; n++)
  {
    omegaVec=(-1i)*omegaNew;
    omegaVec*=time(n);
    omegaVec+=(-1i)*randn;
    omegaVec=exp(omegaVec);
    omegaVec=omegaVec.*FAmp(1,:);
    omegaVec=omegaVec.*domega;
    omegaVec*=(2*omegaNew.n/pi);    
    
    u3x=UXT*omegaVec;
    u3y=UYT*omegaVec;    

    Vh<complex> etax=u3x, etay=u3y;    

    int[int] Order1=[1,1,1],Order=[1,1];
    savevtk(SolutionDir+"/time_"+n+".vtk",ThIce,[real(etax),real(etay)],[imag(etax),imag(etay)], dataname="ReDisp ImDisp",order=Order);
    savevtk(SolutionDir+"/time-stress_"+n+".vtk",ThIce,[real(Sigma(etax,etay)[0]), real(Sigma(etax,etay)[1]), real(Sigma(etax,etay)[2])],[imag(Sigma(etax,etay)[0]), imag(Sigma(etax,etay)[1]), imag(Sigma(etax,etay)[2])],dataname="ReSigma ImSigma",order=Order);
	    
    if(mpirank==0)
      cout<<"Time t="<<n<<endl;
  }
